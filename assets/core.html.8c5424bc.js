import{_ as a,o as l,c as i,a as e,b as o,d as t,e as s,r as c}from"./app.72755c2a.js";const r={},d=t(`<h1 id="asdf" tabindex="-1"><a class="header-anchor" href="#asdf" aria-hidden="true">#</a> asdf</h1><p><code>asdf</code> core contribution guide.</p><h2 id="initial-setup" tabindex="-1"><a class="header-anchor" href="#initial-setup" aria-hidden="true">#</a> Initial Setup</h2><p>Fork <code>asdf</code> on GitHub and/or Git clone the default branch:</p><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;"># clone your fork</span></span>
<span class="line"><span style="color:#F8F8F2;">git clone https://github.com/</span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">GITHUB_USER</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">/asdf.git</span></span>
<span class="line"><span style="color:#88846F;"># or clone asdf</span></span>
<span class="line"><span style="color:#F8F8F2;">git clone https://github.com/asdf-vm/asdf.git</span></span>
<span class="line"></span></code></pre></div><p>The tools for core development are in this repo&#39;s <code>.tool-versions</code>. If you wish to manage with <code>asdf</code> itself, add the plugins:</p><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">asdf plugin add bats https://github.com/timgluz/asdf-bats.git</span></span>
<span class="line"><span style="color:#F8F8F2;">asdf plugin add shellcheck https://github.com/luizm/asdf-shellcheck.git</span></span>
<span class="line"><span style="color:#F8F8F2;">asdf plugin add shfmt https://github.com/luizm/asdf-shfmt.git</span></span>
<span class="line"></span></code></pre></div><p>Install the versions to develop <code>asdf</code> with:</p><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">asdf install</span></span>
<span class="line"></span></code></pre></div><p>It <em>may</em> be useful to not use <code>asdf</code> to manage the tools during development on your local machine as you may need to break functionality which would then break your dev tooling. Here&#39;s the raw list of tools:</p>`,10),p={href:"https://github.com/bats-core/bats-core",target:"_blank",rel:"noopener noreferrer"},h=s("bats-core"),u=s(": Bash Automated Testing System, for unit testing Bash or POSIX compliant scripts."),_={href:"https://github.com/koalaman/shellcheck",target:"_blank",rel:"noopener noreferrer"},m=s("shellcheck"),f=s(": Static analysis tool for shell scripts."),g={href:"https://github.com/mvdan/sh",target:"_blank",rel:"noopener noreferrer"},b=s("shfmt"),F=s(": A shell parser, formatter, and interpreter with bash support; includes shfmt"),y=t(`<h2 id="development" tabindex="-1"><a class="header-anchor" href="#development" aria-hidden="true">#</a> Development</h2><p>If you want to try out your changes without making change to your installed <code>asdf</code>, you can set the <code>$ASDF_DIR</code> variable to the path where you cloned the repository, and temporarily prepend the <code>bin</code> and <code>shims</code> directory of the directory to your path.</p><p>It is best to format, lint and test your code locally before you commit or push to the remote. Use the following scripts/commands:</p><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;"># Shellcheck</span></span>
<span class="line"><span style="color:#F8F8F2;">./scripts/shellcheck.bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># Format</span></span>
<span class="line"><span style="color:#F8F8F2;">./scripts/shfmt.bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># Test: all tests</span></span>
<span class="line"><span style="color:#F8F8F2;">bats test/</span></span>
<span class="line"><span style="color:#88846F;"># Test: for specific command</span></span>
<span class="line"><span style="color:#F8F8F2;">bats test/list_commands.bash</span></span>
<span class="line"></span></code></pre></div>`,4),v={class:"custom-container tip"},k=e("p",{class:"custom-container-title"},"TIP",-1),w=e("strong",null,"Add tests!",-1),x=s(" - Tests are "),T=e("strong",null,"required",-1),q=s(" for new features and speed up review of bug fixes. Please cover new code paths before you create a Pull Request. See "),I={href:"https://bats-core.readthedocs.io/en/stable/index.html",target:"_blank",rel:"noopener noreferrer"},S=s("bats-core documentation"),B=e("h3",{id:"gitignore",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#gitignore","aria-hidden":"true"},"#"),s(" Gitignore")],-1),P=s("The following is the "),C=e("code",null,".gitignore",-1),D=s(" file in the "),E=e("code",null,"asdf-vm/asdf",-1),R=s(" repository. We ignore project-specific files. Files specific to your OS, tools or workflows should be ignored in your global "),A=e("code",null,".gitignore",-1),V=s(" configuration, "),G={href:"http://stratus3d.com/blog/2018/06/03/stop-excluding-editor-temp-files-in-gitignore/",target:"_blank",rel:"noopener noreferrer"},H=s("see here"),N=s(" for more details."),U=t(`<div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">/installs</span></span>
<span class="line"><span style="color:#F8F8F2;">/downloads</span></span>
<span class="line"><span style="color:#F8F8F2;">/plugins</span></span>
<span class="line"><span style="color:#F8F8F2;">/shims</span></span>
<span class="line"><span style="color:#F8F8F2;">repository</span></span>
<span class="line"><span style="color:#F8F8F2;">.vagrant</span></span>
<span class="line"><span style="color:#F8F8F2;">keyrings</span></span>
<span class="line"><span style="color:#F8F8F2;">/tmp</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bats-testing" tabindex="-1"><a class="header-anchor" href="#bats-testing" aria-hidden="true">#</a> Bats Testing</h2>`,2),z=s("It is "),j=e("strong",null,"strongly encouraged",-1),L=s(" to examine the existing test suite and the "),O={href:"https://bats-core.readthedocs.io/en/stable/index.html",target:"_blank",rel:"noopener noreferrer"},W=s("bats-core documentation"),X=s(" before writing tests."),Y=t(`<p>Bats debugging can be difficult at times. Using the TAP output with <code>-t</code> flag will enable you to print outputs with the special file descriptor <code>&gt;&amp;3</code> during test execution, simplifying debugging. As an example:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#88846F;"># test/some_tests.bats</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">printf</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;%s\\n&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;Will not be printed during bats test/some_tests.bats&quot;</span></span>
<span class="line"><span style="color:#66D9EF;">printf</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;%s\\n&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;Will be printed during bats -t test/some_tests.bats&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&gt;&amp;3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),$=s("This is further documented in bats-core "),J={href:"https://bats-core.readthedocs.io/en/stable/writing-tests.html#printing-to-the-terminal",target:"_blank",rel:"noopener noreferrer"},K=s("Printing to the Terminal"),M=s("."),Q=e("h2",{id:"pull-requests-releases-conventional-commits",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pull-requests-releases-conventional-commits","aria-hidden":"true"},"#"),s(" Pull Requests, Releases & Conventional Commits")],-1),Z=e("code",null,"asdf",-1),ee=s(" is using an automated release tool called "),se={href:"https://github.com/googleapis/release-please",target:"_blank",rel:"noopener noreferrer"},ne=s("Release Please"),oe=s(" to automatically bump the "),te={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},ae=s("SemVer"),le=s(" version and generate the "),ie={href:"https://github.com/asdf-vm/asdf/blob/master/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"},ce=s("Changelog"),re=s(". This information is determined by reading the commit history since the last release."),de={href:"https://www.conventionalcommits.org/",target:"_blank",rel:"noopener noreferrer"},pe=s("Conventional Commit messages"),he=s(" define the format of the Pull Request Title which becomes the commit message format on the default branch. This is enforced with GitHub Action "),ue={href:"https://github.com/amannn/action-semantic-pull-request",target:"_blank",rel:"noopener noreferrer"},_e=e("code",null,"amannn/action-semantic-pull-request",-1),me=s("."),fe=t(`<p>Conventional Commit follows this format:</p><div class="language-text ext-text"><pre class="shiki" style="background-color:#272822;"><code><span class="line"><span style="color:#F8F8F2;">&lt;type&gt;[optional scope][optional !]: &lt;description&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;!-- examples --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">fix: some fix</span></span>
<span class="line"><span style="color:#F8F8F2;">feat: a new feature</span></span>
<span class="line"><span style="color:#F8F8F2;">docs: some documentation update</span></span>
<span class="line"><span style="color:#F8F8F2;">docs(website): some change for the website</span></span>
<span class="line"><span style="color:#F8F8F2;">feat!: feature with breaking change</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre></div><p>The full list of <code>&lt;types&gt;</code> are: <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>style</code>, <code>refactor</code>, <code>perf</code>, <code>test</code>, <code>build</code>, <code>ci</code>, <code>chore</code>, <code>revert</code>.</p><ul><li><code>!</code>: indicates a breaking change</li><li><code>fix</code>: will create a new SemVer <code>patch</code></li><li><code>feat</code>: will create a new SemVer <code>minor</code></li><li><code>&lt;type&gt;!</code>: will create a new SemVer <code>major</code></li></ul><p>The Pull Request Title must follow this format.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Use Conventional Commit message format for your Pull Request Title.</p></div><h2 id="docker-images" tabindex="-1"><a class="header-anchor" href="#docker-images" aria-hidden="true">#</a> Docker Images</h2>`,7),ge=s("The "),be={href:"https://github.com/vic/asdf-alpine",target:"_blank",rel:"noopener noreferrer"},Fe=s("asdf-alpine"),ye=s(" and "),ve={href:"https://github.com/vic/asdf-ubuntu",target:"_blank",rel:"noopener noreferrer"},ke=s("asdf-ubuntu"),we=s(" projects are an ongoing effort to provide Dockerized images of some asdf tools. You can use these docker images as base for your development servers, or for running your production apps.");function xe(Te,qe){const n=c("ExternalLinkIcon");return l(),i("div",null,[d,e("ul",null,[e("li",null,[e("a",p,[h,o(n)]),u]),e("li",null,[e("a",_,[m,o(n)]),f]),e("li",null,[e("a",g,[b,o(n)]),F])]),y,e("div",v,[k,e("p",null,[w,x,T,q,e("a",I,[S,o(n)])])]),B,e("p",null,[P,C,D,E,R,A,V,e("a",G,[H,o(n)]),N]),U,e("p",null,[z,j,L,e("a",O,[W,o(n)]),X]),Y,e("p",null,[$,e("a",J,[K,o(n)]),M]),Q,e("p",null,[Z,ee,e("a",se,[ne,o(n)]),oe,e("a",te,[ae,o(n)]),le,e("a",ie,[ce,o(n)]),re]),e("p",null,[e("a",de,[pe,o(n)]),he,e("a",ue,[_e,o(n)]),me]),fe,e("p",null,[ge,e("a",be,[Fe,o(n)]),ye,e("a",ve,[ke,o(n)]),we])])}var Se=a(r,[["render",xe],["__file","core.html.vue"]]);export{Se as default};
